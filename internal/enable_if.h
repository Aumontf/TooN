// -*- c++ -*-

// Copyright (C) 2012 Edward Rosten (twd20@cam.ac.uk),
//
// This file is part of the TooN Library.	This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING.	If not, write to the Free
// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
// USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.	Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.	This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.




// File derived from boost/utility/enable_if.hpp
// 
// Boost enable_if library

// Copyright 2003 (c) The Trustees of Indiana University.

// Use, modification, and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//		Authors: Jaakko Jarvi (jajarvi at osl.iu.edu)
//						 Jeremiah Willcock (jewillco at osl.iu.edu)
//						 Andrew Lumsdaine (lums at osl.iu.edu)

/* LICENSE_1_0.txt
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

namespace TooN
{
namespace Internal
{
 
	template <bool B, class T = void>
	struct enable_if_c {
		typedef T type;
	};

	template <class T>
	struct enable_if_c<false, T> {};

	template <class Cond, class T = void> 
	struct enable_if : public enable_if_c<Cond::value, T> {};

	template <bool B, class T>
	struct lazy_enable_if_c {
		typedef typename T::type type;
	};

	template <class T>
	struct lazy_enable_if_c<false, T> {};

	template <class Cond, class T> 
	struct lazy_enable_if : public lazy_enable_if_c<Cond::value, T> {};


	template <bool B, class T = void>
	struct disable_if_c {
		typedef T type;
	};

	template <class T>
	struct disable_if_c<true, T> {};

	template <class Cond, class T = void> 
	struct disable_if : public disable_if_c<Cond::value, T> {};

	template <bool B, class T>
	struct lazy_disable_if_c {
		typedef typename T::type type;
	};

	template <class T>
	struct lazy_disable_if_c<true, T> {};

	template <class Cond, class T> 
	struct lazy_disable_if : public lazy_disable_if_c<Cond::value, T> {};
} 
}
